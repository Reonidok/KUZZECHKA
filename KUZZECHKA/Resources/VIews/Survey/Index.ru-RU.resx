<?xml version="1.0" encoding="utf-8"?>
<root>
  <!-- 
    Microsoft ResX Schema 
    
    Version 2.0
    
    The primary goals of this format is to allow a simple XML format 
    that is mostly human readable. The generation and parsing of the 
    various data types are done through the TypeConverter classes 
    associated with the data types.
    
    Example:
    
    ... ado.net/XML headers & schema ...
    <resheader name="resmimetype">text/microsoft-resx</resheader>
    <resheader name="version">2.0</resheader>
    <resheader name="reader">System.Resources.ResXResourceReader, System.Windows.Forms, ...</resheader>
    <resheader name="writer">System.Resources.ResXResourceWriter, System.Windows.Forms, ...</resheader>
    <data name="Name1"><value>this is my long string</value><comment>this is a comment</comment></data>
    <data name="Color1" type="System.Drawing.Color, System.Drawing">Blue</data>
    <data name="Bitmap1" mimetype="application/x-microsoft.net.object.binary.base64">
        <value>[base64 mime encoded serialized .NET Framework object]</value>
    </data>
    <data name="Icon1" type="System.Drawing.Icon, System.Drawing" mimetype="application/x-microsoft.net.object.bytearray.base64">
        <value>[base64 mime encoded string representing a byte array form of the .NET Framework object]</value>
        <comment>This is a comment</comment>
    </data>
                
    There are any number of "resheader" rows that contain simple 
    name/value pairs.
    
    Each data row contains a name, and value. The row also contains a 
    type or mimetype. Type corresponds to a .NET class that support 
    text/value conversion through the TypeConverter architecture. 
    Classes that don't support this are serialized and stored with the 
    mimetype set.
    
    The mimetype is used for serialized objects, and tells the 
    ResXResourceReader how to depersist the object. This is currently not 
    extensible. For a given mimetype the value must be set accordingly:
    
    Note - application/x-microsoft.net.object.binary.base64 is the format 
    that the ResXResourceWriter will generate, however the reader can 
    read any of the formats listed below.
    
    mimetype: application/x-microsoft.net.object.binary.base64
    value   : The object must be serialized with 
            : System.Runtime.Serialization.Formatters.Binary.BinaryFormatter
            : and then encoded with base64 encoding.
    
    mimetype: application/x-microsoft.net.object.soap.base64
    value   : The object must be serialized with 
            : System.Runtime.Serialization.Formatters.Soap.SoapFormatter
            : and then encoded with base64 encoding.

    mimetype: application/x-microsoft.net.object.bytearray.base64
    value   : The object must be serialized into a byte array 
            : using a System.ComponentModel.TypeConverter
            : and then encoded with base64 encoding.
    -->
  <xsd:schema id="root" xmlns="" xmlns:xsd="http://www.w3.org/2001/XMLSchema" xmlns:msdata="urn:schemas-microsoft-com:xml-msdata">
    <xsd:import namespace="http://www.w3.org/XML/1998/namespace" />
    <xsd:element name="root" msdata:IsDataSet="true">
      <xsd:complexType>
        <xsd:choice maxOccurs="unbounded">
          <xsd:element name="metadata">
            <xsd:complexType>
              <xsd:sequence>
                <xsd:element name="value" type="xsd:string" minOccurs="0" />
              </xsd:sequence>
              <xsd:attribute name="name" use="required" type="xsd:string" />
              <xsd:attribute name="type" type="xsd:string" />
              <xsd:attribute name="mimetype" type="xsd:string" />
              <xsd:attribute ref="xml:space" />
            </xsd:complexType>
          </xsd:element>
          <xsd:element name="assembly">
            <xsd:complexType>
              <xsd:attribute name="alias" type="xsd:string" />
              <xsd:attribute name="name" type="xsd:string" />
            </xsd:complexType>
          </xsd:element>
          <xsd:element name="data">
            <xsd:complexType>
              <xsd:sequence>
                <xsd:element name="value" type="xsd:string" minOccurs="0" msdata:Ordinal="1" />
                <xsd:element name="comment" type="xsd:string" minOccurs="0" msdata:Ordinal="2" />
              </xsd:sequence>
              <xsd:attribute name="name" type="xsd:string" use="required" msdata:Ordinal="1" />
              <xsd:attribute name="type" type="xsd:string" msdata:Ordinal="3" />
              <xsd:attribute name="mimetype" type="xsd:string" msdata:Ordinal="4" />
              <xsd:attribute ref="xml:space" />
            </xsd:complexType>
          </xsd:element>
          <xsd:element name="resheader">
            <xsd:complexType>
              <xsd:sequence>
                <xsd:element name="value" type="xsd:string" minOccurs="0" msdata:Ordinal="1" />
              </xsd:sequence>
              <xsd:attribute name="name" type="xsd:string" use="required" />
            </xsd:complexType>
          </xsd:element>
        </xsd:choice>
      </xsd:complexType>
    </xsd:element>
  </xsd:schema>
  <resheader name="resmimetype">
    <value>text/microsoft-resx</value>
  </resheader>
  <resheader name="version">
    <value>2.0</value>
  </resheader>
  <resheader name="reader">
    <value>System.Resources.ResXResourceReader, System.Windows.Forms, Version=4.0.0.0, Culture=neutral, PublicKeyToken=b77a5c561934e089</value>
  </resheader>
  <resheader name="writer">
    <value>System.Resources.ResXResourceWriter, System.Windows.Forms, Version=4.0.0.0, Culture=neutral, PublicKeyToken=b77a5c561934e089</value>
  </resheader>
  <data name="Винительный" xml:space="preserve">
    <value>Винительный</value>
  </data>
  <data name="высокая" xml:space="preserve">
    <value>высокая</value>
  </data>
  <data name="высокий" xml:space="preserve">
    <value>высокий</value>
  </data>
  <data name="высокое" xml:space="preserve">
    <value>высокое</value>
  </data>
  <data name="Дательный" xml:space="preserve">
    <value>Дательный</value>
  </data>
  <data name="Дом" xml:space="preserve">
    <value>Дом</value>
  </data>
  <data name="Имена прилагательные" xml:space="preserve">
    <value>Имена прилагательные</value>
  </data>
  <data name="Имена существительные" xml:space="preserve">
    <value>Имена существительные</value>
  </data>
  <data name="Именительный" xml:space="preserve">
    <value>Именительный</value>
  </data>
  <data name="Какое прилагательное нужно использовать в предложении: 'Мои &#xA;друзья живут в ___ доме'" xml:space="preserve">
    <value>Какое прилагательное нужно использовать в предложении: 'Мои 
друзья живут в ___ доме'</value>
  </data>
  <data name="Какое прилагательное нужно использовать в предложении: 'Она &#xA;умная и ___ девушка'" xml:space="preserve">
    <value>Какое прилагательное нужно использовать в предложении: 'Она 
умная и ___ девушка'</value>
  </data>
  <data name="Какое прилагательное нужно использовать в предложении: 'Это ___ &#xA;страница в моем блокноте'" xml:space="preserve">
    <value>Какое прилагательное нужно использовать в предложении: 'Это ___ 
страница в моем блокноте'</value>
  </data>
  <data name="Какое прилагательное нужно использовать в предложении: 'Я вижу &#xA;___ здание за окно'" xml:space="preserve">
    <value>Какое прилагательное нужно использовать в предложении: 'Я вижу 
___ здание за окно'</value>
  </data>
  <data name="Какое прилагательное нужно использовать в предложении: 'Я купил &#xA;___ телефон за очень большие деньги'" xml:space="preserve">
    <value>Какое прилагательное нужно использовать в предложении: 'Я купил 
___ телефон за очень большие деньги'</value>
  </data>
  <data name="Какое существительное является единственным числом?" xml:space="preserve">
    <value>Какое существительное является единственным числом?</value>
  </data>
  <data name="Какое существительное является женским родом?" xml:space="preserve">
    <value>Какое существительное является женским родом?</value>
  </data>
  <data name="Какое существительное является множественным числом?" xml:space="preserve">
    <value>Какое существительное является множественным числом?</value>
  </data>
  <data name="Какое существительное является мужским родом?" xml:space="preserve">
    <value>Какое существительное является мужским родом?</value>
  </data>
  <data name="Какое существительное является средним родом?" xml:space="preserve">
    <value>Какое существительное является средним родом?</value>
  </data>
  <data name="Какой падеж у слова  СТОЛ в предложении 'На столе лежит книга'?" xml:space="preserve">
    <value>Какой падеж у слова "стол" в предложении 'На столе лежит книга'?</value>
  </data>
  <data name="Какой падеж у слова КНИГА в предложении 'Я учу увлекательную &#xA;книгу'?" xml:space="preserve">
    <value>Какой падеж у слова КНИГА в предложении 'Я учу увлекательную 
книгу'?</value>
  </data>
  <data name="Какой падеж у слова КОШКА в предложении 'Моя кошка спит на &#xA;окне'?" xml:space="preserve">
    <value>Какой падеж у слова КОШКА в предложении 'Моя кошка спит на 
окне'?</value>
  </data>
  <data name="Какой падеж у слова МАМА в предложении 'Я подарил цветы своей &#xA;маме'?" xml:space="preserve">
    <value>Какой падеж у слова МАМА в предложении 'Я подарил цветы своей 
маме'?</value>
  </data>
  <data name="Какой падеж у слова ЦВЕТОК в предложении 'Я купила цветок своей &#xA;подруге'?" xml:space="preserve">
    <value>Какой падеж у слова ЦВЕТОК в предложении 'Я купила цветок своей 
подруге'?</value>
  </data>
  <data name="Карандаш" xml:space="preserve">
    <value>Карандаш</value>
  </data>
  <data name="Карандаши" xml:space="preserve">
    <value>Карандаши</value>
  </data>
  <data name="Книга" xml:space="preserve">
    <value>Книга</value>
  </data>
  <data name="красивая" xml:space="preserve">
    <value>красивая</value>
  </data>
  <data name="красивое" xml:space="preserve">
    <value>красивое</value>
  </data>
  <data name="красивый" xml:space="preserve">
    <value>красивый</value>
  </data>
  <data name="Машина" xml:space="preserve">
    <value>Машина</value>
  </data>
  <data name="Море" xml:space="preserve">
    <value>Море</value>
  </data>
  <data name="новое" xml:space="preserve">
    <value>новое</value>
  </data>
  <data name="новом" xml:space="preserve">
    <value>новом</value>
  </data>
  <data name="новые" xml:space="preserve">
    <value>новые</value>
  </data>
  <data name="новый" xml:space="preserve">
    <value>новый</value>
  </data>
  <data name="Око" xml:space="preserve">
    <value>Око</value>
  </data>
  <data name="Падежи" xml:space="preserve">
    <value>Падежи</value>
  </data>
  <data name="пустая" xml:space="preserve">
    <value>пустая</value>
  </data>
  <data name="пустое" xml:space="preserve">
    <value>пустое</value>
  </data>
  <data name="пустой" xml:space="preserve">
    <value>пустой</value>
  </data>
  <data name="Родительный" xml:space="preserve">
    <value>Родительный</value>
  </data>
  <data name="Рука" xml:space="preserve">
    <value>Рука</value>
  </data>
  <data name="Руками" xml:space="preserve">
    <value>Руками</value>
  </data>
  <data name="Руки" xml:space="preserve">
    <value>Руки</value>
  </data>
  <data name="Солнце" xml:space="preserve">
    <value>Солнце</value>
  </data>
</root>