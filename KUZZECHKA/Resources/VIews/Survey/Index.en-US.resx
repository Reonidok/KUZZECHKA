<?xml version="1.0" encoding="utf-8"?>
<root>
  <!-- 
    Microsoft ResX Schema 
    
    Version 2.0
    
    The primary goals of this format is to allow a simple XML format 
    that is mostly human readable. The generation and parsing of the 
    various data types are done through the TypeConverter classes 
    associated with the data types.
    
    Example:
    
    ... ado.net/XML headers & schema ...
    <resheader name="resmimetype">text/microsoft-resx</resheader>
    <resheader name="version">2.0</resheader>
    <resheader name="reader">System.Resources.ResXResourceReader, System.Windows.Forms, ...</resheader>
    <resheader name="writer">System.Resources.ResXResourceWriter, System.Windows.Forms, ...</resheader>
    <data name="Name1"><value>this is my long string</value><comment>this is a comment</comment></data>
    <data name="Color1" type="System.Drawing.Color, System.Drawing">Blue</data>
    <data name="Bitmap1" mimetype="application/x-microsoft.net.object.binary.base64">
        <value>[base64 mime encoded serialized .NET Framework object]</value>
    </data>
    <data name="Icon1" type="System.Drawing.Icon, System.Drawing" mimetype="application/x-microsoft.net.object.bytearray.base64">
        <value>[base64 mime encoded string representing a byte array form of the .NET Framework object]</value>
        <comment>This is a comment</comment>
    </data>
                
    There are any number of "resheader" rows that contain simple 
    name/value pairs.
    
    Each data row contains a name, and value. The row also contains a 
    type or mimetype. Type corresponds to a .NET class that support 
    text/value conversion through the TypeConverter architecture. 
    Classes that don't support this are serialized and stored with the 
    mimetype set.
    
    The mimetype is used for serialized objects, and tells the 
    ResXResourceReader how to depersist the object. This is currently not 
    extensible. For a given mimetype the value must be set accordingly:
    
    Note - application/x-microsoft.net.object.binary.base64 is the format 
    that the ResXResourceWriter will generate, however the reader can 
    read any of the formats listed below.
    
    mimetype: application/x-microsoft.net.object.binary.base64
    value   : The object must be serialized with 
            : System.Runtime.Serialization.Formatters.Binary.BinaryFormatter
            : and then encoded with base64 encoding.
    
    mimetype: application/x-microsoft.net.object.soap.base64
    value   : The object must be serialized with 
            : System.Runtime.Serialization.Formatters.Soap.SoapFormatter
            : and then encoded with base64 encoding.

    mimetype: application/x-microsoft.net.object.bytearray.base64
    value   : The object must be serialized into a byte array 
            : using a System.ComponentModel.TypeConverter
            : and then encoded with base64 encoding.
    -->
  <xsd:schema id="root" xmlns="" xmlns:xsd="http://www.w3.org/2001/XMLSchema" xmlns:msdata="urn:schemas-microsoft-com:xml-msdata">
    <xsd:import namespace="http://www.w3.org/XML/1998/namespace" />
    <xsd:element name="root" msdata:IsDataSet="true">
      <xsd:complexType>
        <xsd:choice maxOccurs="unbounded">
          <xsd:element name="metadata">
            <xsd:complexType>
              <xsd:sequence>
                <xsd:element name="value" type="xsd:string" minOccurs="0" />
              </xsd:sequence>
              <xsd:attribute name="name" use="required" type="xsd:string" />
              <xsd:attribute name="type" type="xsd:string" />
              <xsd:attribute name="mimetype" type="xsd:string" />
              <xsd:attribute ref="xml:space" />
            </xsd:complexType>
          </xsd:element>
          <xsd:element name="assembly">
            <xsd:complexType>
              <xsd:attribute name="alias" type="xsd:string" />
              <xsd:attribute name="name" type="xsd:string" />
            </xsd:complexType>
          </xsd:element>
          <xsd:element name="data">
            <xsd:complexType>
              <xsd:sequence>
                <xsd:element name="value" type="xsd:string" minOccurs="0" msdata:Ordinal="1" />
                <xsd:element name="comment" type="xsd:string" minOccurs="0" msdata:Ordinal="2" />
              </xsd:sequence>
              <xsd:attribute name="name" type="xsd:string" use="required" msdata:Ordinal="1" />
              <xsd:attribute name="type" type="xsd:string" msdata:Ordinal="3" />
              <xsd:attribute name="mimetype" type="xsd:string" msdata:Ordinal="4" />
              <xsd:attribute ref="xml:space" />
            </xsd:complexType>
          </xsd:element>
          <xsd:element name="resheader">
            <xsd:complexType>
              <xsd:sequence>
                <xsd:element name="value" type="xsd:string" minOccurs="0" msdata:Ordinal="1" />
              </xsd:sequence>
              <xsd:attribute name="name" type="xsd:string" use="required" />
            </xsd:complexType>
          </xsd:element>
        </xsd:choice>
      </xsd:complexType>
    </xsd:element>
  </xsd:schema>
  <resheader name="resmimetype">
    <value>text/microsoft-resx</value>
  </resheader>
  <resheader name="version">
    <value>2.0</value>
  </resheader>
  <resheader name="reader">
    <value>System.Resources.ResXResourceReader, System.Windows.Forms, Version=4.0.0.0, Culture=neutral, PublicKeyToken=b77a5c561934e089</value>
  </resheader>
  <resheader name="writer">
    <value>System.Resources.ResXResourceWriter, System.Windows.Forms, Version=4.0.0.0, Culture=neutral, PublicKeyToken=b77a5c561934e089</value>
  </resheader>
  <data name="L1" xml:space="preserve">
    <value>What is the case of the word "table" in the sentence 'There is a book on the table'?</value>
  </data>
  <data name="L2" xml:space="preserve">
    <value>What is the case of the word "book" in the sentence 'I am learning a fascinating book'?</value>
  </data>
  <data name="L3" xml:space="preserve">
    <value>What is the case of the word "cat" in the sentence 'My cat sleeps on
window'?</value>
  </data>
  <data name="L4" xml:space="preserve">
    <value>What is the case of the word "mom" in the sentence 'I gave flowers to my mom'?</value>
  </data>
  <data name="L5" xml:space="preserve">
    <value>What is the case of the word "flower" in the sentence 'I bought a flower for my friend'?</value>
  </data>
  <data name="Q1" xml:space="preserve">
    <value>Which adjective should be used in the sentence: 'My
friends live in ___ house'</value>
  </data>
  <data name="Q2" xml:space="preserve">
    <value>Which adjective should be used in the sentence: 'She
smart and ___ girl'</value>
  </data>
  <data name="Q3" xml:space="preserve">
    <value>Which adjective should be used in the sentence: 'This is ___
page in my notebook'</value>
  </data>
  <data name="Q4" xml:space="preserve">
    <value>Which adjective should be used in the sentence: 'I see
___ building outside the window'</value>
  </data>
  <data name="Q5" xml:space="preserve">
    <value>Which adjective should be used in the sentence: 'I bought
___ phone for a lot of money'</value>
  </data>
  <data name="S1" xml:space="preserve">
    <value>beautiful</value>
  </data>
  <data name="Send" xml:space="preserve">
    <value>Send</value>
  </data>
  <data name="Винительный" xml:space="preserve">
    <value>Accusative</value>
  </data>
  <data name="высокая" xml:space="preserve">
    <value>high</value>
  </data>
  <data name="высокий" xml:space="preserve">
    <value>high</value>
  </data>
  <data name="высокое" xml:space="preserve">
    <value>high</value>
  </data>
  <data name="Дательный" xml:space="preserve">
    <value>Dative</value>
  </data>
  <data name="Дом" xml:space="preserve">
    <value>House</value>
  </data>
  <data name="Имена прилагательные" xml:space="preserve">
    <value>Adjectives</value>
  </data>
  <data name="Имена существительные" xml:space="preserve">
    <value>Nouns</value>
  </data>
  <data name="Именительный" xml:space="preserve">
    <value>Nominative</value>
  </data>
  <data name="Какое существительное является единственным числом?" xml:space="preserve">
    <value>Which noun is singular?</value>
  </data>
  <data name="Какое существительное является женским родом?" xml:space="preserve">
    <value>Which noun is feminine?</value>
  </data>
  <data name="Какое существительное является множественным числом?" xml:space="preserve">
    <value>Which noun is plural?</value>
  </data>
  <data name="Какое существительное является мужским родом?" xml:space="preserve">
    <value>Which noun is masculine?</value>
  </data>
  <data name="Какое существительное является средним родом?" xml:space="preserve">
    <value>Which noun is neuter?</value>
  </data>
  <data name="Карандаш" xml:space="preserve">
    <value>Pencil</value>
  </data>
  <data name="Карандаши" xml:space="preserve">
    <value>Pencils</value>
  </data>
  <data name="Книга" xml:space="preserve">
    <value>Book</value>
  </data>
  <data name="красивая" xml:space="preserve">
    <value>beautiful</value>
  </data>
  <data name="красивое" xml:space="preserve">
    <value>beautiful</value>
  </data>
  <data name="красивый" xml:space="preserve">
    <value>beautiful</value>
  </data>
  <data name="Машина" xml:space="preserve">
    <value>Car</value>
  </data>
  <data name="Море" xml:space="preserve">
    <value>Sea</value>
  </data>
  <data name="новое" xml:space="preserve">
    <value>new</value>
  </data>
  <data name="новом" xml:space="preserve">
    <value>new</value>
  </data>
  <data name="новые" xml:space="preserve">
    <value>new</value>
  </data>
  <data name="новый" xml:space="preserve">
    <value>new</value>
  </data>
  <data name="Око" xml:space="preserve">
    <value>Eye</value>
  </data>
  <data name="Падежи" xml:space="preserve">
    <value>Cases</value>
  </data>
  <data name="пустая" xml:space="preserve">
    <value>empty</value>
  </data>
  <data name="пустое" xml:space="preserve">
    <value>blank</value>
  </data>
  <data name="пустой" xml:space="preserve">
    <value>vacant</value>
  </data>
  <data name="Родительный" xml:space="preserve">
    <value>Genitive</value>
  </data>
  <data name="Рука" xml:space="preserve">
    <value>hand</value>
  </data>
  <data name="Руками" xml:space="preserve">
    <value>hands</value>
  </data>
  <data name="Руки" xml:space="preserve">
    <value>hands</value>
  </data>
  <data name="Солнце" xml:space="preserve">
    <value>Sun</value>
  </data>
</root>